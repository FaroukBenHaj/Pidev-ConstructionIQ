{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/medfa/Desktop/Cycle_ingenieur/Esprit/4SAE5/Projet_PI/Pidev-ConstructionIQ/FrontEnd/Dashboard/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport Keycloak from \"keycloak-js\";\nimport * as i0 from \"@angular/core\";\nexport class KeycloakService {\n  constructor() {\n    this.initialized = false;\n  }\n  get keycloak() {\n    if (!this._keycloak) {\n      this._keycloak = new Keycloak({\n        url: 'http://localhost:9090',\n        realm: 'Esprit-project',\n        clientId: 'Pidev-ConstructionIQ'\n      });\n    }\n    return this._keycloak;\n  }\n  get profile() {\n    return this._profile;\n  }\n  /*\n    async init() {\n      const authenticated = await this.keycloak.init({\n        onLoad: 'login-required'});\n         if (authenticated) {\n        this._profile = (await this.keycloak.loadUserProfile()) as UserProfile;\n        this._profile.token = this.keycloak.token || '';\n      }\n    }*/\n  init() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      if (_this.initialized) {\n        return true;\n      }\n      try {\n        yield _this.keycloak.init({\n          onLoad: 'login-required',\n          checkLoginIframe: false\n        });\n        _this.initialized = true;\n        return true;\n      } catch (error) {\n        console.error('Keycloak init failed', error);\n        throw error;\n      }\n    })();\n  }\n  getRoles() {\n    return this.keycloak.tokenParsed?.realm_access?.roles || [];\n  }\n  login() {\n    return this.keycloak.login();\n  }\n  isLoggedIn() {\n    return !!this.keycloak.token;\n  }\n  logout() {\n    this.keycloak.logout();\n  }\n  getUserRoles() {}\n  static {\n    this.ɵfac = function KeycloakService_Factory(t) {\n      return new (t || KeycloakService)();\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: KeycloakService,\n      factory: KeycloakService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["Keycloak","KeycloakService","constructor","initialized","keycloak","_keycloak","url","realm","clientId","profile","_profile","init","_this","_asyncToGenerator","onLoad","checkLoginIframe","error","console","getRoles","tokenParsed","realm_access","roles","login","isLoggedIn","token","logout","getUserRoles","factory","ɵfac","providedIn"],"sources":["C:\\Users\\medfa\\Desktop\\Cycle_ingenieur\\Esprit\\4SAE5\\Projet_PI\\Pidev-ConstructionIQ\\FrontEnd\\Dashboard\\src\\app\\Services\\keycloak\\keycloak.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport Keycloak from \"keycloak-js\";\nimport {UserProfile} from \"./user-profile\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class KeycloakService {\n  private _keycloak: Keycloak | undefined;\n  private initialized = false;\n\n  get keycloak() {\n    if(!this._keycloak){\n      this._keycloak = new Keycloak({\n        url:'http://localhost:9090',\n        realm:'Esprit-project',\n        clientId:'Pidev-ConstructionIQ'\n      });\n    }\n    return this._keycloak;\n  }\n\n  private _profile: UserProfile | undefined;\n\n  get profile(): UserProfile | undefined {\n    return this._profile;\n  }\n  /*\n    async init() {\n      const authenticated = await this.keycloak.init({\n        onLoad: 'login-required'});\n\n      if (authenticated) {\n        this._profile = (await this.keycloak.loadUserProfile()) as UserProfile;\n        this._profile.token = this.keycloak.token || '';\n      }\n    }*/\n  async init(): Promise<boolean> {\n    if (this.initialized) {\n      return true;\n    }\n    try {\n      await this.keycloak.init({\n        onLoad: 'login-required',\n        checkLoginIframe: false,\n      });\n      this.initialized = true;\n      return true;\n    } catch (error) {\n      console.error('Keycloak init failed', error);\n      throw error;\n    }\n  }\n\n  getRoles(): string[] {\n    return this.keycloak.tokenParsed?.realm_access?.roles || [];\n  }\n  login() {\n    return this.keycloak.login();\n  }\n\n\n  isLoggedIn(): boolean {\n    return !!this.keycloak.token;\n  }\n\n  logout(): void {\n    this.keycloak.logout();\n  }\n\n  getUserRoles() {\n\n  }\n}\n"],"mappings":";AACA,OAAOA,QAAQ,MAAM,aAAa;;AAMlC,OAAM,MAAOC,eAAe;EAH5BC,YAAA;IAKU,KAAAC,WAAW,GAAG,KAAK;;EAE3B,IAAIC,QAAQA,CAAA;IACV,IAAG,CAAC,IAAI,CAACC,SAAS,EAAC;MACjB,IAAI,CAACA,SAAS,GAAG,IAAIL,QAAQ,CAAC;QAC5BM,GAAG,EAAC,uBAAuB;QAC3BC,KAAK,EAAC,gBAAgB;QACtBC,QAAQ,EAAC;OACV,CAAC;;IAEJ,OAAO,IAAI,CAACH,SAAS;EACvB;EAIA,IAAII,OAAOA,CAAA;IACT,OAAO,IAAI,CAACC,QAAQ;EACtB;EACA;;;;;;;;;EAUMC,IAAIA,CAAA;IAAA,IAAAC,KAAA;IAAA,OAAAC,iBAAA;MACR,IAAID,KAAI,CAACT,WAAW,EAAE;QACpB,OAAO,IAAI;;MAEb,IAAI;QACF,MAAMS,KAAI,CAACR,QAAQ,CAACO,IAAI,CAAC;UACvBG,MAAM,EAAE,gBAAgB;UACxBC,gBAAgB,EAAE;SACnB,CAAC;QACFH,KAAI,CAACT,WAAW,GAAG,IAAI;QACvB,OAAO,IAAI;OACZ,CAAC,OAAOa,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;QAC5C,MAAMA,KAAK;;IACZ;EACH;EAEAE,QAAQA,CAAA;IACN,OAAO,IAAI,CAACd,QAAQ,CAACe,WAAW,EAAEC,YAAY,EAAEC,KAAK,IAAI,EAAE;EAC7D;EACAC,KAAKA,CAAA;IACH,OAAO,IAAI,CAAClB,QAAQ,CAACkB,KAAK,EAAE;EAC9B;EAGAC,UAAUA,CAAA;IACR,OAAO,CAAC,CAAC,IAAI,CAACnB,QAAQ,CAACoB,KAAK;EAC9B;EAEAC,MAAMA,CAAA;IACJ,IAAI,CAACrB,QAAQ,CAACqB,MAAM,EAAE;EACxB;EAEAC,YAAYA,CAAA,GAEZ;;;uBAjEWzB,eAAe;IAAA;EAAA;;;aAAfA,eAAe;MAAA0B,OAAA,EAAf1B,eAAe,CAAA2B,IAAA;MAAAC,UAAA,EAFd;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}